<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    xmlns:system="clr-namespace:System;assembly=System.Runtime">

    <system:Double x:Key="TreeViewItemChevronSize">10</system:Double>
    <system:Double x:Key="TreeViewItemFontSize">14</system:Double>

    <Style x:Key="ExpandCollapseToggleButtonStyle" TargetType="{x:Type ToggleButton}">

        <!--  Universal WPF UI focus  -->
        <!--<Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />-->

        <!--  Universal WPF UI focus  -->
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Background" Value="{DynamicResource ApplicationBackgroundDefault500Brush}" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="ToggleButton">

                    <Grid
                        x:Name="ChevronContainer"
                        Width="15"
                        Height="15"
                        Background="Transparent"
                        RenderTransformOrigin="0.5, 0.5">

                        <Grid.RenderTransform>
                            <RotateTransform Angle="0" />
                        </Grid.RenderTransform>

                        <!--<controls:SymbolIcon
                            x:Name="ChevronIcon"
                            FontSize="{StaticResource TreeViewItemChevronSize}"
                            Symbol="ChevronRight28" />-->

                        <!--<ToggleButton Style="{StaticResource ExpandCollapseToggleStyle}" VerticalAlignment="Center" />-->

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked" Value="True">

                            <Trigger.EnterActions>

                                <BeginStoryboard>

                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ChevronContainer"
                                            Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)"
                                            To="90"
                                            Duration="0:0:0.16" />

                                    </Storyboard>

                                </BeginStoryboard>

                            </Trigger.EnterActions>

                            <Trigger.ExitActions>

                                <BeginStoryboard>

                                    <Storyboard>

                                        <DoubleAnimation
                                            Storyboard.TargetName="ChevronContainer"
                                            Storyboard.TargetProperty="(Grid.RenderTransform).(RotateTransform.Angle)"
                                            To="0"
                                            Duration="0:0:0.16" />

                                    </Storyboard>

                                </BeginStoryboard>

                            </Trigger.ExitActions>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style x:Key="DefaultTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">

        <!--  Universal WPF UI focus  -->
        <!--<Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />-->

        <!--  Universal WPF UI focus  -->
        <Setter Property="Background" Value="{DynamicResource ApplicationBackgroundDefault200Brush }" />
        <Setter Property="Foreground" Value="{DynamicResource ApplicationForegroundDefaultBrush}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Border.CornerRadius" Value="5" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type TreeViewItem}">

                    <Grid Background="{TemplateBinding Background}">

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Border
                            x:Name="Border"
                            Grid.Row="0"
                            CornerRadius="{TemplateBinding Border.CornerRadius}">

                            <Grid>

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" MinWidth="19" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <!--Fill edit-->
                                <Rectangle
                                    x:Name="ActiveRectangle"
                                    Grid.Column="0"
                                    Width="3"
                                    Height="16"
                                    Margin="0,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Fill="#263B50"
                                    RadiusX="2"
                                    RadiusY="2"
                                    Visibility="Collapsed" />

                                <ToggleButton
                                    x:Name="Expander"
                                    Grid.Column="0"
                                    Margin="8,0"
                                    ClickMode="Press"
                                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                    Style="{StaticResource ExpandCollapseToggleButtonStyle}" />

                                <ContentPresenter
                                    x:Name="PART_Header"
                                    Grid.Column="1"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    ContentSource="Header"
                                    TextElement.FontSize="{TemplateBinding FontSize}" 
                                    TextElement.Foreground="{TemplateBinding Foreground}" />
                            </Grid>

                        </Border>

                        <Grid Grid.Row="1">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="19" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <ItemsPresenter
                                x:Name="ItemsHost"
                                Grid.Column="1"
                                Grid.ColumnSpan="2"
                                Visibility="Collapsed" />
                        </Grid>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>

                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="red" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="green" />
                            <Setter TargetName="ActiveRectangle" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <MultiTrigger>

                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="False" />
                                <Condition Property="Width" Value="Auto" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />

                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="False" />
                                <Condition Property="Height" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

        <Style.Triggers>

            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">

                <Setter Property="ItemsPanel">

                    <Setter.Value>

                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>

                    </Setter.Value>

                </Setter>

            </Trigger>

        </Style.Triggers>

    </Style>

    <Style BasedOn="{StaticResource DefaultTreeViewItemStyle}" TargetType="{x:Type TreeViewItem}" />

</ResourceDictionary>